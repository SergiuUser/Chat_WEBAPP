// <auto-generated />
using System;
using Chat_WEBAPP.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chat_WEBAPP.Migrations
{
    [DbContext(typeof(ChatContext))]
    [Migration("20231123100607_ChatMigratio")]
    partial class ChatMigratio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Chat_WEBAPP.Models.BlockedUsers", b =>
                {
                    b.Property<int>("BlockedUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlockedUserID"));

                    b.Property<int>("BlockedID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BlocketAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BlockedUserID");

                    b.HasIndex("BlockedID");

                    b.HasIndex("UserID");

                    b.ToTable("BlockedUsers");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.Chat", b =>
                {
                    b.Property<int>("ChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatID"));

                    b.Property<string>("ChDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chtype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatID");

                    b.HasIndex("CreatorID");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.ChatMembers", b =>
                {
                    b.Property<int>("ChatMemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatMemberID"));

                    b.Property<int>("ChatID")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ChatMemberID");

                    b.HasIndex("ChatID");

                    b.HasIndex("MemberID");

                    b.HasIndex("RoleID");

                    b.ToTable("ChatMembers");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.ChatMessages", b =>
                {
                    b.Property<int>("ChatMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatMessageID"));

                    b.Property<int>("ChatID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Edited")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("ChatMessageID");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.ChatRoles", b =>
                {
                    b.Property<int>("ChatRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatRoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoleID");

                    b.ToTable("ChatRoles");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.MessageReactions", b =>
                {
                    b.Property<int>("MessageReactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageReactionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.Property<int>("ReactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MessageReactionID");

                    b.HasIndex("MessageID");

                    b.HasIndex("ReactionTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("MessageReactions");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.ReactionType", b =>
                {
                    b.Property<int>("ReactionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionTypeID"));

                    b.Property<string>("RcName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReactionTypeID");

                    b.ToTable("ReactionType");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.UserFriends", b =>
                {
                    b.Property<int>("FrindID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrindID"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FriendID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FrindID");

                    b.HasIndex("FriendID");

                    b.HasIndex("UserID");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.BlockedUsers", b =>
                {
                    b.HasOne("Chat_WEBAPP.Models.User", "BlockedUser")
                        .WithMany()
                        .HasForeignKey("BlockedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat_WEBAPP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.Chat", b =>
                {
                    b.HasOne("Chat_WEBAPP.Models.User", "userCreator")
                        .WithMany()
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userCreator");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.ChatMembers", b =>
                {
                    b.HasOne("Chat_WEBAPP.Models.Chat", "chat")
                        .WithMany()
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat_WEBAPP.Models.User", "userMember")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat_WEBAPP.Models.ChatRoles", "role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chat");

                    b.Navigation("role");

                    b.Navigation("userMember");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.MessageReactions", b =>
                {
                    b.HasOne("Chat_WEBAPP.Models.ChatMessages", "chatMessages")
                        .WithMany()
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat_WEBAPP.Models.ReactionType", "reactionType")
                        .WithMany()
                        .HasForeignKey("ReactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat_WEBAPP.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chatMessages");

                    b.Navigation("reactionType");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Chat_WEBAPP.Models.UserFriends", b =>
                {
                    b.HasOne("Chat_WEBAPP.Models.User", "friend")
                        .WithMany()
                        .HasForeignKey("FriendID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat_WEBAPP.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("friend");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
